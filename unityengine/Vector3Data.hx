package unityengine;

@:final @:csNative @:native("UnityEngine.Vector3") extern class Vector3Data extends cs.system.ValueType
{
	var magnitude(get,never) : Single;
	var normalized(get,never) : Vector3;
	var sqrMagnitude(get,never) : Single;
	var x : Single;
	var y : Single;
	var z : Single;
	@:final @:overload function new(x : Single, y : Single, z : Single) : Void;
	@:final @:overload function new(x : Single, y : Single) : Void;
	@:final @:overload function Normalize() : Void;
	@:final @:overload function Scale(scale : Vector3) : Void;
	@:final @:overload function Set(new_x : Single, new_y : Single, new_z : Single) : Void;
	@:final @:overload function get_Item(index : Int) : Single;
	@:final @:overload private function get_magnitude() : Single;
	@:final @:overload private function get_normalized() : Vector3;
	@:final @:overload private function get_sqrMagnitude() : Single;
	@:final @:overload function set_Item(index : Int, value : Single) : Void;
	static var back(get,never) : Vector3;
	static var down(get,never) : Vector3;
	static var forward(get,never) : Vector3;
	static var fwd(get,never) : Vector3;
	static var kEpsilon(default,never) : Single;
	static var left(get,never) : Vector3;
	static var one(get,never) : Vector3;
	static var right(get,never) : Vector3;
	static var up(get,never) : Vector3;
	static var zero(get,never) : Vector3;
	@:final @:overload static function Angle(from : Vector3, to : Vector3) : Single;
	@:final @:overload static function AngleBetween(from : Vector3, to : Vector3) : Single;
	@:final @:overload static function ClampMagnitude(vector : Vector3, maxLength : Single) : Vector3;
	@:final @:overload static function Cross(lhs : Vector3, rhs : Vector3) : Vector3;
	@:final @:overload static function Distance(a : Vector3, b : Vector3) : Single;
	@:final @:overload static function Dot(lhs : Vector3, rhs : Vector3) : Single;
	@:final @:overload static function Exclude(excludeThis : Vector3, fromThat : Vector3) : Vector3;
	@:final @:overload static function Lerp(from : Vector3, to : Vector3, t : Single) : Vector3;
	@:final @:overload static function Magnitude(a : Vector3) : Single;
	@:final @:overload static function Max(lhs : Vector3, rhs : Vector3) : Vector3;
	@:final @:overload static function Min(lhs : Vector3, rhs : Vector3) : Vector3;
	@:final @:overload static function MoveTowards(current : Vector3, target : Vector3, maxDistanceDelta : Single) : Vector3;
	@:final @:overload static function OrthoNormalize(normal : cs.Ref<Vector3>, tangent : cs.Ref<Vector3>) : Void;
	@:final @:overload static function OrthoNormalize(normal : cs.Ref<Vector3>, tangent : cs.Ref<Vector3>, binormal : cs.Ref<Vector3>) : Void;
	@:final @:overload static function Project(vector : Vector3, onNormal : Vector3) : Vector3;
	@:final @:overload static function Reflect(inDirection : Vector3, inNormal : Vector3) : Vector3;
	@:final @:overload static function RotateTowards(current : Vector3, target : Vector3, maxRadiansDelta : Single, maxMagnitudeDelta : Single) : Vector3;
	@:final @:overload static function Slerp(from : Vector3, to : Vector3, t : Single) : Vector3;
	@:final @:overload static function SmoothDamp(current : Vector3, target : Vector3, currentVelocity : cs.Ref<Vector3>, smoothTime : Single, maxSpeed : Single) : Vector3;
	@:final @:overload static function SmoothDamp(current : Vector3, target : Vector3, currentVelocity : cs.Ref<Vector3>, smoothTime : Single, maxSpeed : Single, deltaTime : Single) : Vector3;
	@:final @:overload static function SmoothDamp(current : Vector3, target : Vector3, currentVelocity : cs.Ref<Vector3>, smoothTime : Single) : Vector3;
	@:final @:overload static function SqrMagnitude(a : Vector3) : Single;
	@:native("Normalize") @:final @:overload static function _Normalize(value : Vector3) : Vector3;
	@:native("Scale") @:final @:overload static function _Scale(a : Vector3, b : Vector3) : Vector3;
	@:final @:overload static private function get_back() : Vector3;
	@:final @:overload static private function get_down() : Vector3;
	@:final @:overload static private function get_forward() : Vector3;
	@:final @:overload static private function get_fwd() : Vector3;
	@:final @:overload static private function get_left() : Vector3;
	@:final @:overload static private function get_one() : Vector3;
	@:final @:overload static private function get_right() : Vector3;
	@:final @:overload static private function get_up() : Vector3;
	@:final @:overload static private function get_zero() : Vector3;
	@:final @:overload static function op_Addition(a : Vector3, b : Vector3) : Vector3;
	@:final @:overload static function op_Division(a : Vector3, d : Single) : Vector3;
	@:final @:overload static function op_Equality(lhs : Vector3, rhs : Vector3) : Bool;
	@:final @:overload static function op_Inequality(lhs : Vector3, rhs : Vector3) : Bool;
	@:final @:overload static function op_Multiply(a : Vector3, d : Single) : Vector3;
	@:final @:overload static function op_Multiply(d : Single, a : Vector3) : Vector3;
	@:final @:overload static function op_Subtraction(a : Vector3, b : Vector3) : Vector3;
	@:final @:overload static function op_UnaryNegation(a : Vector3) : Vector3;
}
